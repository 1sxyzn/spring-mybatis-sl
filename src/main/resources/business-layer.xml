<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"> <!-- 무결성 유지를 위해 tx 추가 -->

	<context:component-scan base-package="com.multicampus.biz"/>
	
	<aop:aspectj-autoproxy/>
	
	<!-- DataSource 등록 -->
	<context:property-placeholder location="classpath:boardProps.properties"/>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${board.datasource.jdbc.driverClass}"/>
		<property name="url"             value="${board.datasource.jdbc.jdbcUrl}"/>
		<property name="username"        value="${board.datasource.jdbc.username}"/>
		<property name="password"        value="${board.datasource.jdbc.password}"/>
	</bean>
	
	<bean class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 트랜잭션 관리 어드바이스는, 어드바이스 전용 태그 설정을 통해 사용 가능 -->
	<!-- 어드바이스가 동작하려면 포인트 컷이 있어야 함 / 그리고 어스펙트 설정을 통해 포인트컷과 어드바이스를 연결시켜야 함 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception"/> <!-- 모든 메소드에서, 예외가 발생하면 롤백을 해라. 커밋은 예외가 발생하지 않으면 자동으로 됨 -->
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.multicampus.biz..*Impl.*(..))"/>
		<!-- aspect를 쓰려면 method 명을 알아야하는데, 트랜잭션은 우리가 만든게 아니므로 메소드 명을 알 수 없음. 그래서 어드바이서를 씀 -->
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>

	<!-- 횡단관심에 해당하는 Advice 클래스를 등록한다. 
	<bean id="log"            class="com.multicampus.biz.common.LogAdvice"/>
	<bean id="afterReturning" class="com.multicampus.biz.common.AfterReturningAdvice"/>
	<bean id="afterThrowing"  class="com.multicampus.biz.common.AfterThrowingAdvice"/>
	<bean id="around"         class="com.multicampus.biz.common.AroundAdvice"/>
	-->
	
	<!-- AOP 설정 
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.multicampus.biz..*Impl.*(..))"/>
		<aop:pointcut id="getPointcut" expression="execution(* com.multicampus.biz..*Impl.get*(..))"/>
		
		<aop:aspect ref="log">
			<aop:before pointcut-ref="allPointcut" method="printLog"/>
		</aop:aspect>
		
		<aop:aspect ref="afterReturning">
			<aop:after-returning pointcut-ref="getPointcut" method="afterLog" returning="returnObj"/>
		</aop:aspect>
		
		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="exceptionObj"/>
		</aop:aspect>
		
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" method="aroundLog"/>
		</aop:aspect>
	</aop:config>
	-->

<!-- 

	<bean id="boardDAO" class="com.multicampus.biz.board.BoardDAO"></bean>
	
	<bean id="boardService" class="com.multicampus.biz.board.BoardServiceImpl" p:boardDAO-ref="boardDAO"></bean>

 -->
</beans>




